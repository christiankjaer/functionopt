
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package petter.simplec;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import petter.cfg.*;
import petter.cfg.expression.types.*;
import petter.cfg.expression.*;
import petter.cfg.edges.*;
import petter.utils.Tupel;
import petter.utils.Tripel;
import petter.utils.Terminal;
import petter.utils.AnnotatableList;
import petter.utils.PostProcessVisitor;
import petter.utils.BindingCreator;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\003\000\002\002\004\000\002\023" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\004" +
    "\000\002\022\003\000\002\024\003\000\002\037\002\000" +
    "\002\003\006\000\002\040\002\000\002\003\007\000\002" +
    "\003\004\000\002\003\002\000\002\035\003\000\002\035" +
    "\004\000\002\025\004\000\002\025\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\006\000\002" +
    "\041\002\000\002\026\007\000\002\030\005\000\002\030" +
    "\005\000\002\030\006\000\002\030\004\000\002\030\005" +
    "\000\002\042\002\000\002\030\007\000\002\043\002\000" +
    "\002\030\006\000\002\044\002\000\002\004\005\000\002" +
    "\036\004\000\002\036\002\000\002\021\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\045\002\000\002" +
    "\046\002\000\002\032\010\000\002\047\002\000\002\050" +
    "\002\000\002\032\011\000\002\032\004\000\002\033\004" +
    "\000\002\033\002\000\002\034\005\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\012\005\000\002" +
    "\012\003\000\002\012\002\000\002\051\002\000\002\006" +
    "\010\000\002\052\002\000\002\053\002\000\002\007\007" +
    "\000\002\014\005\000\002\014\003\000\002\013\005\000" +
    "\002\013\003\000\002\011\004\000\002\011\002\000\002" +
    "\010\004\000\002\010\002\000\002\015\005\000\002\054" +
    "\002\000\002\015\006\000\002\055\002\000\002\056\002" +
    "\000\002\057\002\000\002\015\016\000\002\060\002\000" +
    "\002\015\012\000\002\061\002\000\002\015\010\000\002" +
    "\062\002\000\002\015\011\000\002\063\002\000\002\015" +
    "\005\000\002\064\002\000\002\015\006\000\002\015\003" +
    "\000\002\065\002\000\002\015\005\000\002\066\002\000" +
    "\002\015\005\000\002\015\006\000\002\015\005\000\002" +
    "\067\002\000\002\015\010\000\002\015\005\000\002\015" +
    "\005\000\002\017\003\000\002\017\004\000\002\017\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\016\005\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\006\000\002\020\005\000\002\020\004\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\030\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\001\002\000\004\002\u0100\001\002\000\030\002\001\004" +
    "\006\005\012\006\026\007\016\010\025\011\007\012\024" +
    "\013\011\014\017\015\015\001\002\000\044\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\034\uffd7\040\uffd7\041\uffd7\042\uffd7\052" +
    "\uffd7\072\uffd7\076\uffd7\001\002\000\044\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\034\uffd3\040\uffd3\041\uffd3\042\uffd3\052\uffd3" +
    "\072\uffd3\076\uffd3\001\002\000\012\040\045\052\043\072" +
    "\ufff9\076\046\001\002\000\006\036\uffcf\076\031\001\002" +
    "\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\034\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\052\uffd8\072\uffd8\076\uffd8\001\002\000" +
    "\036\004\006\005\012\006\026\007\016\010\025\011\007" +
    "\012\024\013\011\014\017\015\015\040\ufffb\052\ufffb\072" +
    "\ufffb\076\ufffb\001\002\000\044\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\034\uffd9\040\uffd9\041\uffd9\042\uffd9\052\uffd9\072\uffd9" +
    "\076\uffd9\001\002\000\036\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\040\ufffa\052\ufffa\072\ufffa\076\ufffa\001\002\000\044\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\034\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\052\uffd5\072\uffd5\076\uffd5\001\002\000\044\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\034\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\052\uffd1\072\uffd1\076\uffd1\001\002\000\036\004\006\005" +
    "\012\006\026\007\016\010\025\011\007\012\024\013\011" +
    "\014\017\015\015\040\ufffe\052\ufffe\072\ufffe\076\ufffe\001" +
    "\002\000\012\040\uffff\052\uffff\072\uffff\076\uffff\001\002" +
    "\000\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\034\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\052\uffd0\072\uffd0\076\uffd0\001\002\000" +
    "\030\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\001\002\000" +
    "\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\034\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\052\uffd2\072\uffd2\076\uffd2\001\002\000\044" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\034\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\052\uffd4\072\uffd4\076\uffd4\001\002\000\044\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\034\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\052\uffd6\072\uffd6\076\uffd6\001\002\000\012\040\ufffd" +
    "\052\ufffd\072\ufffd\076\ufffd\001\002\000\012\040\ufffc\052" +
    "\ufffc\072\ufffc\076\ufffc\001\002\000\046\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\034\uffc9\036\uffcc\040\uffc9\041\uffc9\042\uffc9" +
    "\052\uffc9\072\uffc9\076\uffc9\001\002\000\004\036\033\001" +
    "\002\000\026\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\037\uffc7\001\002\000" +
    "\026\004\006\005\012\006\026\007\016\010\025\011\007" +
    "\012\024\013\011\014\017\037\uffce\001\002\000\026\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\037\uffc8\001\002\000\010\040\045\052" +
    "\043\076\046\001\002\000\004\037\040\001\002\000\044" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\034\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\052\uffcd\072\uffcd\076\uffcd\001\002\000\004\072" +
    "\207\001\002\000\010\034\uffdd\071\uffdd\072\uffdd\001\002" +
    "\000\016\034\ufff3\040\ufff3\041\ufff3\042\ufff3\052\043\076" +
    "\ufff3\001\002\000\020\034\ufff0\036\ufff0\040\053\041\ufff0" +
    "\042\052\071\ufff0\072\ufff0\001\002\000\010\040\045\052" +
    "\043\076\046\001\002\000\020\034\uffec\036\uffec\040\uffec" +
    "\041\uffec\042\uffec\071\uffec\072\uffec\001\002\000\006\034" +
    "\200\072\uffb9\001\002\000\006\040\045\076\046\001\002" +
    "\000\020\034\ufff1\036\ufff1\040\053\041\ufff1\042\052\071" +
    "\ufff1\072\ufff1\001\002\000\026\040\077\043\175\044\104" +
    "\046\107\047\102\051\110\052\103\075\106\076\075\100" +
    "\101\001\002\000\030\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\034\uffe8\041" +
    "\uffe8\001\002\000\030\004\006\005\012\006\026\007\016" +
    "\010\025\011\007\012\024\013\011\014\017\034\uffc0\041" +
    "\uffc0\001\002\000\006\034\072\041\174\001\002\000\016" +
    "\034\uffc5\040\062\041\uffc5\042\061\052\043\076\046\001" +
    "\002\000\006\034\uffc1\041\uffc1\001\002\000\014\034\uffef" +
    "\040\062\041\uffef\042\061\076\046\001\002\000\026\040" +
    "\077\043\170\044\104\046\107\047\102\051\110\052\103" +
    "\075\106\076\075\100\101\001\002\000\040\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\034\uffdf\040\062\041\uffdf\042\061\052\043\076" +
    "\046\001\002\000\006\034\uffc4\041\uffc4\001\002\000\006" +
    "\034\uffc3\041\uffc3\001\002\000\012\034\uffee\040\067\041" +
    "\uffee\042\066\001\002\000\026\040\077\043\100\044\104" +
    "\046\107\047\102\051\110\052\103\075\106\076\075\100" +
    "\101\001\002\000\030\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\034\uffe1\041" +
    "\uffe1\001\002\000\030\004\006\005\012\006\026\007\016" +
    "\010\025\011\007\012\024\013\011\014\017\034\uffc0\041" +
    "\uffc0\001\002\000\006\034\072\041\073\001\002\000\024" +
    "\004\006\005\012\006\026\007\016\010\025\011\007\012" +
    "\024\013\011\014\017\001\002\000\012\034\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\006\034\uffc2\041\uffc2\001" +
    "\002\000\066\034\uff96\040\145\041\uff96\042\uff96\043\uff96" +
    "\046\142\047\146\050\uff96\051\uff96\052\uff96\053\uff96\055" +
    "\uff96\056\141\057\144\060\143\061\140\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072" +
    "\uff96\077\uff96\001\002\000\050\034\uff93\041\uff93\042\uff93" +
    "\043\uff93\050\uff93\051\uff93\052\uff93\053\uff93\055\uff93\062" +
    "\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93" +
    "\071\uff93\072\uff93\077\uff93\001\002\000\024\040\077\044" +
    "\104\046\107\047\102\051\110\052\103\075\106\076\075" +
    "\100\101\001\002\000\012\034\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\001\002\000\050\034\uff91\041\uff91\042\uff91\043\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\055\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91" +
    "\072\uff91\077\uff91\001\002\000\004\076\135\001\002\000" +
    "\024\040\077\044\104\046\107\047\102\051\110\052\103" +
    "\075\106\076\075\100\101\001\002\000\024\040\077\044" +
    "\104\046\107\047\102\051\110\052\103\075\106\076\075" +
    "\100\101\001\002\000\022\042\112\043\132\050\115\051" +
    "\113\052\114\053\117\071\120\077\116\001\002\000\050" +
    "\034\uff92\041\uff92\042\uff92\043\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\055\uff92\062\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\077\uff92\001" +
    "\002\000\004\076\131\001\002\000\024\040\077\044\104" +
    "\046\107\047\102\051\110\052\103\075\106\076\075\100" +
    "\101\001\002\000\050\034\uff8d\041\uff8d\042\112\043\uff8d" +
    "\050\115\051\113\052\114\053\117\055\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d" +
    "\072\uff8d\077\116\001\002\000\024\040\077\044\104\046" +
    "\107\047\102\051\110\052\103\075\106\076\075\100\101" +
    "\001\002\000\024\040\077\044\104\046\107\047\102\051" +
    "\110\052\103\075\106\076\075\100\101\001\002\000\024" +
    "\040\077\044\104\046\107\047\102\051\110\052\103\075" +
    "\106\076\075\100\101\001\002\000\024\040\077\044\104" +
    "\046\107\047\102\051\110\052\103\075\106\076\075\100" +
    "\101\001\002\000\050\034\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\077\uff8b\001\002\000\024\040\077\044\104\046" +
    "\107\047\102\051\110\052\103\075\106\076\075\100\101" +
    "\001\002\000\026\040\077\044\104\045\121\046\107\047" +
    "\102\051\110\052\103\075\106\076\075\100\101\001\002" +
    "\000\050\034\uff90\041\uff90\042\uff90\043\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\055\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\077" +
    "\uff90\001\002\000\050\034\uff8f\041\uff8f\042\112\043\uff8f" +
    "\050\115\051\113\052\114\053\117\055\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\120" +
    "\072\uff8f\077\116\001\002\000\050\034\uff88\041\uff88\042" +
    "\112\043\uff88\050\115\051\113\052\114\053\117\055\uff88" +
    "\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070" +
    "\uff88\071\uff88\072\uff88\077\116\001\002\000\050\034\uff89" +
    "\041\uff89\042\112\043\uff89\050\115\051\113\052\114\053" +
    "\117\055\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89" +
    "\067\uff89\070\uff89\071\uff89\072\uff89\077\116\001\002\000" +
    "\050\034\uff8a\041\uff8a\042\112\043\uff8a\050\115\051\113" +
    "\052\114\053\117\055\uff8a\062\uff8a\063\uff8a\064\uff8a\065" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\077\116" +
    "\001\002\000\050\034\uff87\041\uff87\042\112\043\uff87\050" +
    "\115\051\113\052\114\053\117\055\uff87\062\uff87\063\uff87" +
    "\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072" +
    "\uff87\077\116\001\002\000\022\042\112\043\130\050\115" +
    "\051\113\052\114\053\117\071\120\077\116\001\002\000" +
    "\050\034\uff94\041\uff94\042\uff94\043\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\055\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\077\uff94" +
    "\001\002\000\050\034\uff84\041\uff84\042\uff84\043\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\055\uff84\062\uff84\063\uff84" +
    "\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\077\uff84\001\002\000\012\034\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\001\002\000\050\034\uff8e\041\uff8e\042\112\043" +
    "\uff8e\050\115\051\113\052\114\053\117\055\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071" +
    "\120\072\uff8e\077\116\001\002\000\050\034\uff95\041\uff95" +
    "\042\112\043\uff95\050\115\051\113\052\114\053\117\055" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\077\116\001\002\000\050\034" +
    "\uff83\041\uff83\042\uff83\043\uff83\050\uff83\051\uff83\052\uff83" +
    "\053\uff83\055\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\077\uff83\001\002" +
    "\000\022\041\137\042\112\050\115\051\113\052\114\053" +
    "\117\071\120\077\116\001\002\000\050\034\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\055" +
    "\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c" +
    "\070\uff8c\071\uff8c\072\uff8c\077\uff8c\001\002\000\024\040" +
    "\077\044\104\046\107\047\102\051\110\052\103\075\106" +
    "\076\075\100\101\001\002\000\024\040\077\044\104\046" +
    "\107\047\102\051\110\052\103\075\106\076\075\100\101" +
    "\001\002\000\050\034\uff85\041\uff85\042\uff85\043\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\055\uff85\062\uff85\063\uff85" +
    "\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072" +
    "\uff85\077\uff85\001\002\000\024\040\077\044\104\046\107" +
    "\047\102\051\110\052\103\075\106\076\075\100\101\001" +
    "\002\000\024\040\077\044\104\046\107\047\102\051\110" +
    "\052\103\075\106\076\075\100\101\001\002\000\026\040" +
    "\077\041\150\044\104\046\107\047\102\051\110\052\103" +
    "\075\106\076\075\100\101\001\002\000\050\034\uff86\041" +
    "\uff86\042\uff86\043\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\055\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\077\uff86\001\002\000\004" +
    "\041\154\001\002\000\050\034\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\055\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071" +
    "\uff7e\072\uff7e\077\uff7e\001\002\000\024\034\152\041\uffb7" +
    "\042\112\050\115\051\113\052\114\053\117\071\120\077" +
    "\116\001\002\000\024\040\077\044\104\046\107\047\102" +
    "\051\110\052\103\075\106\076\075\100\101\001\002\000" +
    "\004\041\uffb8\001\002\000\050\034\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\055\uff7d\062" +
    "\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\077\uff7d\001\002\000\050\034\uff81\041" +
    "\uff81\042\112\043\uff81\050\115\051\113\052\114\053\117" +
    "\055\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067" +
    "\uff81\070\uff81\071\uff81\072\uff81\077\116\001\002\000\050" +
    "\034\uff7f\041\uff7f\042\112\043\uff7f\050\115\051\113\052" +
    "\114\053\117\055\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f" +
    "\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\077\116\001" +
    "\002\000\050\034\uff82\041\uff82\042\112\043\uff82\050\115" +
    "\051\113\052\114\053\117\055\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82" +
    "\077\116\001\002\000\050\034\uff80\041\uff80\042\112\043" +
    "\uff80\050\115\051\113\052\114\053\117\055\uff80\062\uff80" +
    "\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071" +
    "\uff80\072\uff80\077\116\001\002\000\030\004\006\005\012" +
    "\006\026\007\016\010\025\011\007\012\024\013\011\014" +
    "\017\034\uffc0\041\uffc0\001\002\000\004\041\165\001\002" +
    "\000\004\041\164\001\002\000\020\034\uffeb\036\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\071\uffeb\072\uffeb\001\002\000\012" +
    "\034\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\006\034" +
    "\072\041\167\001\002\000\012\034\uffde\040\uffde\041\uffde" +
    "\042\uffde\001\002\000\012\034\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\001\002\000\022\042\112\043\172\050\115\051\113" +
    "\052\114\053\117\071\120\077\116\001\002\000\012\034" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000\012\034\uffed" +
    "\040\067\041\uffed\042\066\001\002\000\020\034\uffe7\036" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\071\uffe7\072\uffe7\001\002" +
    "\000\020\034\uffea\036\uffea\040\uffea\041\uffea\042\uffea\071" +
    "\uffea\072\uffea\001\002\000\022\042\112\043\177\050\115" +
    "\051\113\052\114\053\117\071\120\077\116\001\002\000" +
    "\020\034\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9\071\uffe9" +
    "\072\uffe9\001\002\000\010\040\045\052\043\076\046\001" +
    "\002\000\004\072\uffba\001\002\000\014\034\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\076\ufff2\001\002\000\010\034\uffda\071" +
    "\205\072\uffda\001\002\000\006\034\uffdc\072\uffdc\001\002" +
    "\000\024\040\077\044\104\046\107\047\102\051\110\052" +
    "\103\075\106\076\075\100\101\001\002\000\024\034\uffdb" +
    "\042\112\050\115\051\113\052\114\053\117\071\120\072" +
    "\uffdb\077\116\001\002\000\026\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\037" +
    "\uffc6\001\002\000\004\036\211\001\002\000\026\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\037\uffc7\001\002\000\026\004\006\005\012" +
    "\006\026\007\016\010\025\011\007\012\024\013\011\014" +
    "\017\037\uffcb\001\002\000\004\037\214\001\002\000\044" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\034\uffca\040\uffca\041\uffca" +
    "\042\uffca\052\uffca\072\uffca\076\uffca\001\002\000\004\072" +
    "\377\001\002\000\004\072\ufff7\001\002\000\012\034\uffdd" +
    "\036\uffbf\071\uffdd\072\uffdd\001\002\000\004\036\221\001" +
    "\002\000\104\004\006\005\012\006\026\007\016\010\025" +
    "\011\007\012\024\013\011\014\017\015\015\016\233\017" +
    "\uffab\020\225\022\223\023\234\024\224\025\237\026\241" +
    "\027\222\030\236\031\240\032\227\036\uffbd\037\uffb5\040" +
    "\077\044\104\046\107\047\102\051\110\052\103\075\106" +
    "\076\235\100\101\001\002\000\004\075\372\001\002\000" +
    "\004\021\370\001\002\000\004\072\uff9e\001\002\000\004" +
    "\040\353\001\002\000\004\017\344\001\002\000\004\040" +
    "\334\001\002\000\004\036\330\001\002\000\106\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\044\uffa1" +
    "\046\uffa1\047\uffa1\051\uffa1\052\uffa1\075\uffa1\076\uffa1\100" +
    "\uffa1\001\002\000\104\004\006\005\012\006\026\007\016" +
    "\010\025\011\007\012\024\013\011\014\017\015\015\016" +
    "\233\017\uffab\020\225\022\223\023\234\024\224\025\237" +
    "\026\241\027\222\030\236\031\240\032\227\036\uffbd\037" +
    "\uffb5\040\077\044\104\046\107\047\102\051\110\052\103" +
    "\075\106\076\235\100\101\001\002\000\024\040\077\044" +
    "\104\046\107\047\102\051\110\052\103\075\106\076\075" +
    "\100\101\001\002\000\004\072\uffa0\001\002\000\042\035" +
    "\320\040\145\042\uff96\046\142\047\146\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\056\141\057\144\060\143\061\140\071" +
    "\uff96\072\uff96\077\uff96\001\002\000\004\040\313\001\002" +
    "\000\004\076\311\001\002\000\004\040\255\001\002\000" +
    "\004\035\253\001\002\000\022\042\112\050\115\051\113" +
    "\052\114\053\117\071\120\072\uffa5\077\116\001\002\000" +
    "\004\037\250\001\002\000\010\040\045\052\043\076\046" +
    "\001\002\000\004\072\uffb1\001\002\000\004\072\247\001" +
    "\002\000\106\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\044\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\075\uffb0\076\uffb0\100\uffb0\001\002\000\030\002\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\001\002\000\004\072\252\001" +
    "\002\000\106\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\044\uffa4\046\uffa4\047\uffa4\051\uffa4\052\uffa4" +
    "\075\uffa4\076\uffa4\100\uffa4\001\002\000\102\004\006\005" +
    "\012\006\026\007\016\010\025\011\007\012\024\013\011" +
    "\014\017\015\015\016\233\017\uffab\020\225\022\223\023" +
    "\234\024\224\025\237\026\241\027\222\030\236\031\240" +
    "\032\227\036\uffbd\040\077\044\104\046\107\047\102\051" +
    "\110\052\103\075\106\076\235\100\101\001\002\000\106" +
    "\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\044\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\075\uff9b\076" +
    "\uff9b\100\uff9b\001\002\000\026\040\256\044\104\046\107" +
    "\047\102\051\110\052\103\054\261\075\106\076\075\100" +
    "\101\001\002\000\026\040\256\044\104\046\107\047\102" +
    "\051\110\052\103\054\261\075\106\076\075\100\101\001" +
    "\002\000\010\041\uffa9\062\264\063\263\001\002\000\034" +
    "\042\112\050\115\051\113\052\114\053\117\055\270\064" +
    "\273\065\274\066\267\067\272\070\271\071\120\077\116" +
    "\001\002\000\026\040\256\044\104\046\107\047\102\051" +
    "\110\052\103\054\261\075\106\076\075\100\101\001\002" +
    "\000\012\041\uff7b\062\264\063\263\072\uff7b\001\002\000" +
    "\026\040\256\044\104\046\107\047\102\051\110\052\103" +
    "\054\261\075\106\076\075\100\101\001\002\000\026\040" +
    "\256\044\104\046\107\047\102\051\110\052\103\054\261" +
    "\075\106\076\075\100\101\001\002\000\012\041\uff78\062" +
    "\264\063\263\072\uff78\001\002\000\012\041\uff77\062\264" +
    "\063\263\072\uff77\001\002\000\024\040\077\044\104\046" +
    "\107\047\102\051\110\052\103\075\106\076\075\100\101" +
    "\001\002\000\024\040\077\044\104\046\107\047\102\051" +
    "\110\052\103\075\106\076\075\100\101\001\002\000\024" +
    "\040\077\044\104\046\107\047\102\051\110\052\103\075" +
    "\106\076\075\100\101\001\002\000\024\040\077\044\104" +
    "\046\107\047\102\051\110\052\103\075\106\076\075\100" +
    "\101\001\002\000\024\040\077\044\104\046\107\047\102" +
    "\051\110\052\103\075\106\076\075\100\101\001\002\000" +
    "\024\040\077\044\104\046\107\047\102\051\110\052\103" +
    "\075\106\076\075\100\101\001\002\000\030\041\uff75\042" +
    "\112\050\115\051\113\052\114\053\117\062\uff75\063\uff75" +
    "\071\120\072\uff75\077\116\001\002\000\030\041\uff76\042" +
    "\112\050\115\051\113\052\114\053\117\062\uff76\063\uff76" +
    "\071\120\072\uff76\077\116\001\002\000\030\041\uff74\042" +
    "\112\050\115\051\113\052\114\053\117\062\uff74\063\uff74" +
    "\071\120\072\uff74\077\116\001\002\000\030\041\uff73\042" +
    "\112\050\115\051\113\052\114\053\117\062\uff73\063\uff73" +
    "\071\120\072\uff73\077\116\001\002\000\030\041\uff79\042" +
    "\112\050\115\051\113\052\114\053\117\062\uff79\063\uff79" +
    "\071\120\072\uff79\077\116\001\002\000\030\041\uff7c\042" +
    "\112\050\115\051\113\052\114\053\117\062\uff7c\063\uff7c" +
    "\071\120\072\uff7c\077\116\001\002\000\004\041\304\001" +
    "\002\000\102\004\006\005\012\006\026\007\016\010\025" +
    "\011\007\012\024\013\011\014\017\015\015\016\233\017" +
    "\uffab\020\225\022\223\023\234\024\224\025\237\026\241" +
    "\027\222\030\236\031\240\032\227\036\uffbd\040\077\044" +
    "\104\046\107\047\102\051\110\052\103\075\106\076\235" +
    "\100\101\001\002\000\106\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\044\uffa8\046\uffa8\047\uffa8\051" +
    "\uffa8\052\uffa8\075\uffa8\076\uffa8\100\uffa8\001\002\000\010" +
    "\041\310\062\264\063\263\001\002\000\036\041\137\042" +
    "\112\050\115\051\113\052\114\053\117\055\270\064\273" +
    "\065\274\066\267\067\272\070\271\071\120\077\116\001" +
    "\002\000\012\041\uff7a\062\uff7a\063\uff7a\072\uff7a\001\002" +
    "\000\004\072\312\001\002\000\106\004\uff98\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\036\uff98\037\uff98\040\uff98\044\uff98\046\uff98\047" +
    "\uff98\051\uff98\052\uff98\075\uff98\076\uff98\100\uff98\001\002" +
    "\000\024\040\077\044\104\046\107\047\102\051\110\052" +
    "\103\075\106\076\075\100\101\001\002\000\022\041\uff9a" +
    "\042\112\050\115\051\113\052\114\053\117\071\120\077" +
    "\116\001\002\000\004\041\316\001\002\000\102\004\006" +
    "\005\012\006\026\007\016\010\025\011\007\012\024\013" +
    "\011\014\017\015\015\016\233\017\uffab\020\225\022\223" +
    "\023\234\024\224\025\237\026\241\027\222\030\236\031" +
    "\240\032\227\036\uffbd\040\077\044\104\046\107\047\102" +
    "\051\110\052\103\075\106\076\235\100\101\001\002\000" +
    "\106\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\036\uff99\037\uff99\040" +
    "\uff99\044\uff99\046\uff99\047\uff99\051\uff99\052\uff99\075\uff99" +
    "\076\uff99\100\uff99\001\002\000\102\004\006\005\012\006" +
    "\026\007\016\010\025\011\007\012\024\013\011\014\017" +
    "\015\015\016\233\017\uffab\020\225\022\223\023\234\024" +
    "\224\025\237\026\241\027\222\030\236\031\240\032\227" +
    "\036\uffbd\040\077\044\104\046\107\047\102\051\110\052" +
    "\103\075\106\076\235\100\101\001\002\000\106\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\022\uff97" +
    "\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\036\uff97\037\uff97\040\uff97\044\uff97" +
    "\046\uff97\047\uff97\051\uff97\052\uff97\075\uff97\076\uff97\100" +
    "\uff97\001\002\000\004\072\323\001\002\000\106\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\036\uff9f\037\uff9f\040\uff9f\044\uff9f" +
    "\046\uff9f\047\uff9f\051\uff9f\052\uff9f\075\uff9f\076\uff9f\100" +
    "\uff9f\001\002\000\022\042\112\050\115\051\113\052\114" +
    "\053\117\071\120\072\uffa3\077\116\001\002\000\004\072" +
    "\326\001\002\000\106\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\044\uffa2\046\uffa2\047\uffa2\051\uffa2" +
    "\052\uffa2\075\uffa2\076\uffa2\100\uffa2\001\002\000\004\037" +
    "\uffb6\001\002\000\104\004\006\005\012\006\026\007\016" +
    "\010\025\011\007\012\024\013\011\014\017\015\015\016" +
    "\233\017\uffab\020\225\022\223\023\234\024\224\025\237" +
    "\026\241\027\222\030\236\031\240\032\227\036\uffbd\037" +
    "\uffb5\040\077\044\104\046\107\047\102\051\110\052\103" +
    "\075\106\076\235\100\101\001\002\000\004\037\uffbc\001" +
    "\002\000\004\037\333\001\002\000\106\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\036\uffbb\037\uffbb\040\uffbb\044\uffbb\046\uffbb" +
    "\047\uffbb\051\uffbb\052\uffbb\075\uffbb\076\uffbb\100\uffbb\001" +
    "\002\000\026\040\256\044\104\046\107\047\102\051\110" +
    "\052\103\054\261\075\106\076\075\100\101\001\002\000" +
    "\010\041\uffa7\062\264\063\263\001\002\000\004\041\337" +
    "\001\002\000\102\004\006\005\012\006\026\007\016\010" +
    "\025\011\007\012\024\013\011\014\017\015\015\016\233" +
    "\017\uffab\020\225\022\223\023\234\024\224\025\237\026" +
    "\241\027\222\030\236\031\240\032\227\036\uffbd\040\077" +
    "\044\104\046\107\047\102\051\110\052\103\075\106\076" +
    "\235\100\101\001\002\000\106\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\342\036\uffb3\037\uffb3\040\uffb3\044\uffb3\046\uffb3\047\uffb3" +
    "\051\uffb3\052\uffb3\075\uffb3\076\uffb3\100\uffb3\001\002\000" +
    "\106\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\044\uffa6\046\uffa6\047\uffa6\051\uffa6\052\uffa6\075\uffa6" +
    "\076\uffa6\100\uffa6\001\002\000\102\004\006\005\012\006" +
    "\026\007\016\010\025\011\007\012\024\013\011\014\017" +
    "\015\015\016\233\017\uffab\020\225\022\223\023\234\024" +
    "\224\025\237\026\241\027\222\030\236\031\240\032\227" +
    "\036\uffbd\040\077\044\104\046\107\047\102\051\110\052" +
    "\103\075\106\076\235\100\101\001\002\000\106\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\036\uffb4\037\uffb4\040\uffb4\044\uffb4" +
    "\046\uffb4\047\uffb4\051\uffb4\052\uffb4\075\uffb4\076\uffb4\100" +
    "\uffb4\001\002\000\102\004\006\005\012\006\026\007\016" +
    "\010\025\011\007\012\024\013\011\014\017\015\015\016" +
    "\233\017\uffab\020\225\022\223\023\234\024\224\025\237" +
    "\026\241\027\222\030\236\031\240\032\227\036\uffbd\040" +
    "\077\044\104\046\107\047\102\051\110\052\103\075\106" +
    "\076\235\100\101\001\002\000\004\031\346\001\002\000" +
    "\004\040\347\001\002\000\026\040\256\044\104\046\107" +
    "\047\102\051\110\052\103\054\261\075\106\076\075\100" +
    "\101\001\002\000\010\041\351\062\264\063\263\001\002" +
    "\000\004\072\352\001\002\000\106\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\036\uffaa\037\uffaa\040\uffaa\044\uffaa\046\uffaa\047" +
    "\uffaa\051\uffaa\052\uffaa\075\uffaa\076\uffaa\100\uffaa\001\002" +
    "\000\024\040\077\044\104\046\107\047\102\051\110\052" +
    "\103\075\106\076\075\100\101\001\002\000\022\042\112" +
    "\050\115\051\113\052\114\053\117\071\120\072\uffaf\077" +
    "\116\001\002\000\004\072\356\001\002\000\026\040\256" +
    "\044\104\046\107\047\102\051\110\052\103\054\261\075" +
    "\106\076\075\100\101\001\002\000\010\062\264\063\263" +
    "\072\uffae\001\002\000\004\072\361\001\002\000\024\040" +
    "\077\044\104\046\107\047\102\051\110\052\103\075\106" +
    "\076\075\100\101\001\002\000\022\041\uffad\042\112\050" +
    "\115\051\113\052\114\053\117\071\120\077\116\001\002" +
    "\000\004\041\364\001\002\000\102\004\006\005\012\006" +
    "\026\007\016\010\025\011\007\012\024\013\011\014\017" +
    "\015\015\016\233\017\uffab\020\225\022\223\023\234\024" +
    "\224\025\237\026\241\027\222\030\236\031\240\032\227" +
    "\036\uffbd\040\077\044\104\046\107\047\102\051\110\052" +
    "\103\075\106\076\235\100\101\001\002\000\106\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040\uffac\044\uffac" +
    "\046\uffac\047\uffac\051\uffac\052\uffac\075\uffac\076\uffac\100" +
    "\uffac\001\002\000\004\072\367\001\002\000\106\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\044\uff9d" +
    "\046\uff9d\047\uff9d\051\uff9d\052\uff9d\075\uff9d\076\uff9d\100" +
    "\uff9d\001\002\000\004\076\371\001\002\000\106\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\036\uffb2\037\uffb2\040\uffb2\044\uffb2" +
    "\046\uffb2\047\uffb2\051\uffb2\052\uffb2\075\uffb2\076\uffb2\100" +
    "\uffb2\001\002\000\004\035\373\001\002\000\102\004\006" +
    "\005\012\006\026\007\016\010\025\011\007\012\024\013" +
    "\011\014\017\015\015\016\233\017\uffab\020\225\022\223" +
    "\023\234\024\224\025\237\026\241\027\222\030\236\031" +
    "\240\032\227\036\uffbd\040\077\044\104\046\107\047\102" +
    "\051\110\052\103\075\106\076\235\100\101\001\002\000" +
    "\106\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\044\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\075\uff9c" +
    "\076\uff9c\100\uff9c\001\002\000\004\072\376\001\002\000" +
    "\030\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\001\002\000" +
    "\030\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\020\006\022\021\017\022\020\023\007\024\012" +
    "\031\013\032\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\046\014\215\025\216\026\043\035\047" +
    "\037\214\001\001\000\004\045\031\001\001\000\002\001" +
    "\001\000\014\021\017\022\027\024\012\031\013\032\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\017\022\026\024\012" +
    "\031\013\032\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\207\001\001\000\002\001\001\000\004\033\033" +
    "\001\001\000\014\021\035\031\013\032\021\034\034\046" +
    "\036\001\001\000\002\001\001\000\014\004\046\014\040" +
    "\025\041\026\043\035\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\202\001\001" +
    "\000\004\035\201\001\001\000\002\001\001\000\010\025" +
    "\162\026\043\035\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\050\001\001\000\002\001\001\000" +
    "\006\016\175\017\075\001\001\000\004\041\053\001\001" +
    "\000\014\005\056\012\054\021\055\031\013\032\021\001" +
    "\001\000\002\001\001\000\014\025\063\026\043\027\062" +
    "\030\064\035\057\001\001\000\002\001\001\000\006\026" +
    "\050\030\172\001\001\000\006\016\170\017\075\001\001" +
    "\000\016\025\162\026\043\027\161\030\064\035\057\043" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\104\017\075\001\001\000\004\042" +
    "\067\001\001\000\014\005\056\012\070\021\055\031\013" +
    "\032\021\001\001\000\002\001\001\000\012\005\073\021" +
    "\055\031\013\032\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\135\017\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\133\017\075\001\001\000" +
    "\006\016\132\017\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\110\017\075\001" +
    "\001\000\002\001\001\000\006\016\126\017\075\001\001" +
    "\000\006\016\125\017\075\001\001\000\006\016\124\017" +
    "\075\001\001\000\006\016\123\017\075\001\001\000\002" +
    "\001\001\000\006\016\122\017\075\001\001\000\006\016" +
    "\121\017\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\157\017\075\001\001\000\006\016\156\017" +
    "\075\001\001\000\002\001\001\000\006\016\155\017\075" +
    "\001\001\000\006\016\154\017\075\001\001\000\010\013" +
    "\146\016\150\017\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\152\016\150\017\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\056\012\165\021\055" +
    "\031\013\032\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\046\014\200\025\041\026\043\035\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\203\001\001\000" +
    "\002\001\001\000\006\016\205\017\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\211\001\001\000\014\021\035\031\013\032\021\034\034" +
    "\050\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\374\001\001\000\006\044\202" +
    "\051\217\001\001\000\002\001\001\000\034\007\230\011" +
    "\242\015\231\016\241\017\075\021\017\022\020\023\243" +
    "\024\012\031\013\032\021\052\227\060\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\230\011\326" +
    "\015\231\016\241\017\075\021\017\022\020\023\243\024" +
    "\012\031\013\032\021\052\227\060\225\001\001\000\006" +
    "\016\323\017\075\001\001\000\004\065\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\250\001\001\000" +
    "\002\001\001\000\014\004\046\014\244\025\041\026\043" +
    "\035\047\001\001\000\004\054\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\230\015\253\016\241\017" +
    "\075\021\017\022\020\023\243\024\012\031\013\032\021" +
    "\052\227\060\225\001\001\000\002\001\001\000\010\016" +
    "\257\017\075\020\256\001\001\000\010\016\306\017\075" +
    "\020\305\001\001\000\004\061\302\001\001\000\002\001" +
    "\001\000\010\016\257\017\075\020\261\001\001\000\002" +
    "\001\001\000\010\016\257\017\075\020\265\001\001\000" +
    "\010\016\257\017\075\020\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\301\017\075\001\001\000" +
    "\006\016\300\017\075\001\001\000\006\016\277\017\075" +
    "\001\001\000\006\016\276\017\075\001\001\000\006\016" +
    "\275\017\075\001\001\000\006\016\274\017\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\230\015\304\016\241\017\075\021" +
    "\017\022\020\023\243\024\012\031\013\032\021\052\227" +
    "\060\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\313\017\075\001\001\000\004\067" +
    "\314\001\001\000\002\001\001\000\032\007\230\015\316" +
    "\016\241\017\075\021\017\022\020\023\243\024\012\031" +
    "\013\032\021\052\227\060\225\001\001\000\002\001\001" +
    "\000\032\007\230\015\320\016\241\017\075\021\017\022" +
    "\020\023\243\024\012\031\013\032\021\052\227\060\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\230\011\330\015" +
    "\231\016\241\017\075\021\017\022\020\023\243\024\012" +
    "\031\013\032\021\052\227\060\225\001\001\000\004\053" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\257\017\075\020\334\001\001\000\004\062\335\001" +
    "\001\000\002\001\001\000\032\007\230\015\337\016\241" +
    "\017\075\021\017\022\020\023\243\024\012\031\013\032" +
    "\021\052\227\060\225\001\001\000\004\010\340\001\001" +
    "\000\002\001\001\000\032\007\230\015\342\016\241\017" +
    "\075\021\017\022\020\023\243\024\012\031\013\032\021" +
    "\052\227\060\225\001\001\000\002\001\001\000\032\007" +
    "\230\015\344\016\241\017\075\021\017\022\020\023\243" +
    "\024\012\031\013\032\021\052\227\060\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\257\017\075" +
    "\020\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\353\017\075\001\001\000\004" +
    "\055\354\001\001\000\002\001\001\000\010\016\257\017" +
    "\075\020\356\001\001\000\004\056\357\001\001\000\002" +
    "\001\001\000\006\016\361\017\075\001\001\000\004\057" +
    "\362\001\001\000\002\001\001\000\032\007\230\015\364" +
    "\016\241\017\075\021\017\022\020\023\243\024\012\031" +
    "\013\032\021\052\227\060\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\230\015\373" +
    "\016\241\017\075\021\017\022\020\023\243\024\012\031" +
    "\013\032\021\052\227\060\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	public static boolean isTypedef(List l){
		for (Object o:l){
			if (o instanceof Integer && ((Integer)o).equals(petter.simplec.sym.TYPEDEF)) return true;
		}
		return false;
	}
	public static Type typeFrom(List l){
		for (Object o:l){
			if (o instanceof Type) return (Type)o;
		}
		return null;
	}	

    public petter.utils.SymbolTable sym = new petter.utils.SymbolTable();
    public int blocknestingdepth = 0;
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
		lex.setParser(this);
		State initstate = createState();
 		globalinits = new Tupel<>(initstate,initstate);
	try{
	    sym.newLocal("return");
	} catch (Exception e) {System.out.println("variable return could not be created");}
    }

    public Stack<Tripel<Expression,State,State>> switchStack = new Stack<>();
    public Stack<Tupel<State, State>> loopStack = new Stack<>();

    public List<Tupel<Expression, Expression>> prefix  = new LinkedList<>();
    public Hashtable<Expression, Expression> postfix  = new Hashtable<>();

    public void throwException(String s) throws Exception{
	throw new Exception(s);
    }

	public Tupel<String,Type> parambinding(XMLElement e,Type baseType){
		String name = null;
		name=(String)((XMLElement.Terminal)SyntaxTreeXPath.query("//identifier",e).get(0)).value();
		Type t = BindingCreator.extractType(e,baseType);
		return new Tupel<>(name,t);
	}

	public Tupel<String,Type> binding(XMLElement e,Type baseType){
		String name = (String)((XMLElement.Terminal)SyntaxTreeXPath.query("//identifier",e).get(0)).value();
		Type t = BindingCreator.extractType(e,baseType);
		return new Tupel<>(name,t);
	}

    public State createState(){
        State s = new State();
        s.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return s;
    }
    public Transition createAssignmentEdge(State start, State end, Expression lhs, Expression rhs){
        Transition result = TransitionFactory.createAssignment(start, end, lhs, rhs);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createNullEdge(State start, State end){
        Transition result = TransitionFactory.createNop(start, end);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createAssertionEdge(State start, State end, Expression ex, Operator op){
        Transition result = TransitionFactory.createGuard(start, end, ex,op);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createMethodCallEdge(State start, State end, FunctionCall m){
        Transition result = TransitionFactory.createProcedureCall(start, end, m);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Expression obtainExpr(String i) throws Exception{
	int num = sym.getId(i); 
        Type t = sym.getType(i);
	if (num==-1) throw new Exception("Identifier "+i+" never declared");
        final Variable var;
        Expression result;
        result= var = new Variable(num, i, t);
        for (Tupel<Expression,Expression> e : prefix) {
            if (e.a.equals(var)) result =e.b;
        }
        return result;
    }

    public Tupel<State,State> generatePrePostFixes(){
        State superStart;
        State start = createState();
        superStart = start;
	Tupel<State, State> prefix = generatePreFixes();
	Tupel<State, State> postfix =generatePostFixes(true);
	mergeStates(postfix.a, prefix.b);
        return new Tupel<State, State>(prefix.a, postfix.b);

    }
  private static Type retType(Type t){ 
    if (t instanceof Function) return ((Function)t).getReturnType();
    return ((Function)(((PointerTo)t).getInner())).getReturnType();
  }
  public Tupel<State,State> generatePreFixes(){
        State superStart, start;
        superStart = start = createState();
        for(Tupel<Expression,Expression> t : prefix){
            State connect = createState();
            Transition e;
            Type tbtype = t.b.getType();
            if ((t.b instanceof FunctionCall)&&(retType(tbtype).equals(petter.cfg.expression.types.Void.create())))   
               e = createMethodCallEdge(start, connect, (FunctionCall)t.b);
            else  
               e = createAssignmentEdge(start, connect, t.a, t.b);
	    e.putAnnotation( "__location_left", t.b.getAnnotation("__location_left"));
	    e.putAnnotation( "__location_right", t.b.getAnnotation("__location_right"));
	    start.putAnnotation("__location", e.getAnnotation("__location_left"));
	    connect.putAnnotation("__location", e.getAnnotation("__location_right"));
	    start = connect;
	   
        }
        prefix.clear();
	return new Tupel<State, State>(superStart, start);

    }

 public Tupel<State,State> generatePostFixes(boolean clear){
        State superStart;
        State start = createState();
        superStart = start;
	for(Expression i : postfix.keySet()){
            State connect = createState();
            Transition e = createAssignmentEdge(start, connect, i, postfix.get(i));
	    e.putAnnotation( "__location_left", postfix.get(i).getAnnotation("__location_left"));
	    e.putAnnotation( "__location_right", postfix.get(i).getAnnotation("__location_right"));
	    //System.out.println("annotion of assign edge: "+e.getAnnotations());
	    start.putAnnotation("__location", e.getAnnotation("__location_left"));
	    connect.putAnnotation("__location", e.getAnnotation("__location_right"));
            start = connect;
        } 
        if (clear) postfix.clear();
        return new Tupel<State, State>(superStart, start);

    }




    public  void mergeStates(State news, State old){
		Iterator<Transition> iter = old.getInIterator();
		if(!iter.hasNext()) {
			Transition e = createNullEdge(old, news); 
			e.putAnnotation( "__location_left", news.getAnnotation("__location"));
			e.putAnnotation( "__location_right", old.getAnnotation("__location"));
			if(old.isLoopSeparator()) news.setLoopSeparator(true);
			if(old.getAnnotation("__label") != null) news.putAnnotation("__label", old.getAnnotation("__label"));
			return; 
		}
	
		while(iter.hasNext()){
	    	Transition e = iter.next();
	    	if(news.getAnnotation("__location") == null){
				news.putAnnotation("__location", old.getAnnotation("__location"));
	    	}
	    	if(old.getAnnotation("__location") == null){
				old.putAnnotation("__location", news.getAnnotation("__location"));
	    	}
	    	e.setDest(news);
        }
    }

	Tupel<State,State> globalinits;
	List<State> returns;
	public void resetReturns(){
		returns=new LinkedList<State>();
	}
	public void addReturn(State s){
		returns.add(s);
	}
	public Iterable<State> currentReturns(){
		return returns;
	}
    /** Report a fatal error.  This method takes a  message string and an 
     *  additional object (to be used by specializations implemented in 
     *  subclasses).  Here in the base class a very simple implementation 
     *  is provided which reports the error then throws an exception. 
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    @Override
    public void report_fatal_error(String message, Object   info) throws Exception {
		System.err.println("FATAL: "+errorFromObject(message,info));
        throw new Exception("in Simple C Compiler:\n  "+ message+ "\n  occured at "+info);
    }
    /** Report a non fatal error (or warning).  This method takes a message 
     *  string and an additional object (to be used by specializations 
     *  implemented in subclasses).  Here in the base class a very simple 
     *  implementation is provided which simply prints the message to 
     *  System.err. 
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    @Override
    public void report_error(String message, Object info) {
		System.err.println("ERROR: "+errorFromObject(message,info));
    }

    /** This method is called when a syntax error has been detected and recovery 
     *  is about to be invoked.  Here in the base class we just emit a 
     *  "Syntax error" error message.  
     *
     * @param cur_token the current lookahead Symbol.
     */
    @Override
    public void syntax_error(Symbol cur_token) {
      report_error("Syntax error:", cur_token);
      report_expected_token_ids();
    }
    /** This method is called if it is determined that syntax error recovery 
     *  has been unsuccessful.  Here in the base class we report a fatal error. 
     *
     * @param cur_token the current lookahead Symbol.
     */
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
      report_fatal_error("Couldn't repair and continue parse", cur_token);
      //report_expected_token_ids();
    }

	public String errorFromObject(String message, Object info){
		if (info instanceof ComplexSymbol){
			ComplexSymbol token = (ComplexSymbol)info;
			Location left=token.xleft;
			Location right=token.xright;
			String location = " at ";
			if (left!=null) location+=left+" / ";
			if (right!=null) location+=right+";";
	        return message+location;
		}
		else if (info instanceof Annotatable){
			Annotatable token = (Annotatable)info;
			Location left=(Location)token.getAnnotation("__location_left");
			Location right=(Location)token.getAnnotation("__location_right");
			String location = " at ";
			if (left!=null) location+=left+" / ";
			if (right!=null) location+=right+";";
	        return message+location;
		}
		else {
			return message+" "+info;
		}
	}

        

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // translationunit ::= declarationlist 
            {
              CompilationUnit RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Hashtable<String,Procedure> ht = new Hashtable<String,Procedure>();
            for (Procedure m: l.b){
                ht.put(m.getName(),m);
            }
		parser.sym.enterBlock();
		parser.blocknestingdepth++;
		parser.resetReturns();


		State newend = parser.createState();
		int tmpid = parser.sym.newTemporary(Int.create());
    	Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),Int.create());
		parser.createAssignmentEdge(parser.globalinits.b,newend,tmp,new FunctionCall("main",null,new LinkedList<>()));
		Procedure init = new Procedure("$init",parser.globalinits.a,newend,new LinkedList<>(),new LinkedList<>());
		ht.put(init.getName(),init);
	    
    	parser.sym.leaveBlock();
    	parser.blocknestingdepth--;

		CompilationUnit cls = new CompilationUnit(parser.sym.getGlobalSymbolTable(), ht, parser.sym.getGlobals());
	    RESULT = cls;
	    PostProcessVisitor.prettify(cls);
            for (Procedure m: cls){
                m.refreshStates();
            }
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translationunit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= translationunit EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CompilationUnit start_val = (CompilationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dspec ::= declspec 
            {
              List RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	RESULT = ds; 
    parser.sym.setLastParsedType(typeFrom(ds));
	parser.sym.disableTypenames();
    if (isTypedef(ds)) 
		parser.sym.setTypedefMode();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dspec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declspec ::= type 
            {
              List RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new LinkedList();RESULT.add(typ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declspec ::= type declspec 
            {
              List RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=ds;RESULT.add(typ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declspec ::= storageclassspec declspec 
            {
              List RESULT =null;
		Location scsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location scsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer scs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=ds;RESULT.add(scs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declspec ::= storageclassspec 
            {
              List RESULT =null;
		Location scsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer scs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new LinkedList(); RESULT.add(scs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // storageclassspec ::= TYPEDEF 
            {
              Integer RESULT =null;
		 RESULT= new Integer(petter.simplec.sym.TYPEDEF); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageclassspec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 RESULT=l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarationlist ::= declarationlist dspec NT$0 SEMI 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tupel<List<Integer>,List<Procedure>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List type = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Tupel<State,State>> il = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

	Type typ = typeFrom(type);
	State begin=parser.globalinits.b;
	State end=begin;
 	for(Tupel<State, State> init : il){
        parser.mergeStates(init.a, begin);
     	begin = init.b;
     	Tupel<State,State> t = parser.generatePostFixes(true);
     	parser.mergeStates(t.a, init.b);
     	end = t.b;
 	}
	parser.globalinits = new Tupel<State, State>(parser.globalinits.a, end);
	RESULT = l;
	parser.sym.resetTypedefMode();
	parser.sym.enableTypenames();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarationlist ::= declarationlist dspec initdeclList NT$1 SEMI 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Tupel<List<Integer>,List<Procedure>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List type = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AnnotatableList<Tupel<State,State>> il = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarationlist ::= declarationlist procdecl 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Procedure d = (Procedure)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (d!=null)
        l.b.add(d);
	RESULT = l;
	parser.sym.resetTypedefMode();//although it should be illegal here, anyway!
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarationlist ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		
    RESULT = new Tupel<List<Integer>,List<Procedure>>(new ArrayList<Integer>(),new ArrayList<Procedure>());

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pointer ::= MULOP 
            {
              Integer RESULT =null;
		 RESULT =1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pointer ::= MULOP pointer 
            {
              Integer RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= i+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarator ::= pointer direct_declarator 
            {
              XMLElement RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new XMLElement.NonTerminal("pointer",0,new XMLElement.Terminal(pxleft,"count",p,pxright),dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator ::= direct_declarator 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // abstract_declarator ::= pointer 
            {
              XMLElement RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new XMLElement.NonTerminal("pointer",0,new XMLElement.Terminal(pxleft,"count",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // abstract_declarator ::= direct_abstract_declarator 
            {
              XMLElement RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement dad = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // abstract_declarator ::= pointer direct_abstract_declarator 
            {
              XMLElement RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new XMLElement.NonTerminal("pointer",0,new XMLElement.Terminal(pxleft,"count",p,pxright),d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // direct_declarator ::= IDENT 
            {
              XMLElement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new XMLElement.Terminal(ixleft,"identifier",i.getTerminal(),ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // direct_declarator ::= LPAR declarator RPAR 
            {
              XMLElement RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // direct_declarator ::= direct_declarator LSQ RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new XMLElement.NonTerminal("array",0,dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // direct_declarator ::= direct_declarator LSQ expr RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new XMLElement.NonTerminal("array",1,dd,new XMLElement.Terminal(exleft,"index",e,exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 
	parser.sym.enterBlock();
    parser.blocknestingdepth++;
	parser.resetReturns();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // direct_declarator ::= direct_declarator LPAR NT$2 paramlist RPAR 
            {
              XMLElement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (XMLElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> p = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	parser.sym.leaveBlock();
    parser.blocknestingdepth--;
	RESULT=new XMLElement.NonTerminal("function",0,dd,new XMLElement.Terminal(pxleft,"params",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // direct_abstract_declarator ::= LPAR abstract_declarator RPAR 
            {
              XMLElement RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // direct_abstract_declarator ::= direct_abstract_declarator LSQ RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new XMLElement.NonTerminal("array",0,dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // direct_abstract_declarator ::= direct_abstract_declarator LSQ expr RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new XMLElement.NonTerminal("array",1,dd,new XMLElement.Terminal(exleft,"index",e,exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // direct_abstract_declarator ::= LSQ RSQ 
            {
              XMLElement RESULT =null;
		 RESULT=new XMLElement.NonTerminal("array",2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // direct_abstract_declarator ::= LSQ expr RSQ 
            {
              XMLElement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new XMLElement.NonTerminal("array",3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    parser.sym.enterBlock();
    parser.blocknestingdepth++;
	parser.resetReturns();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // direct_abstract_declarator ::= direct_abstract_declarator LPAR NT$3 paramlist RPAR 
            {
              XMLElement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (XMLElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> p = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    parser.sym.leaveBlock();
    parser.blocknestingdepth--;
	RESULT=new XMLElement.NonTerminal("function",0,dd,new XMLElement.Terminal(pxleft,"params",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              XMLElement RESULT =null;

	parser.sym.enterBlock();
    parser.blocknestingdepth++;
	parser.resetReturns();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // direct_abstract_declarator ::= LPAR NT$4 paramlist RPAR 
            {
              XMLElement RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (XMLElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> p = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		     
	parser.sym.leaveBlock();
    parser.blocknestingdepth--;
	RESULT=new XMLElement.NonTerminal("function",1,new XMLElement.Terminal(pxleft,"params",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

	Type baseType = parser.sym.getLastParsedType();
	Tupel<String,Type> binding = parser.binding(d,baseType);
    try {
		parser.sym.setLastParsedType(binding.b);
		int id = parser.sym.newLocal(binding.a);
		Variable var = new Variable(id,binding.a,binding.b);
     	UnknownExpression u = new UnknownExpression(binding.b);
		//u.putAnnotation("__location_left", i.getAnnotation("__location_left"));
     	//u.putAnnotation("__location_right", i.getAnnotation("__location_right"));
		parser.prefix.add(Tupel.create(var, u));
     	RESULT = parser.generatePreFixes();
		parser.sym.setLastParsedType(baseType);
	}catch (Exception ex){
		ex.printStackTrace();
		parser.report_fatal_error("Identifier "+binding.a+" already declared!",binding.a);
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // initdecl ::= declarator NT$5 assign_opt 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression o = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	if (o!=null){
		Type baseType = parser.sym.getLastParsedType();
		Tupel<String,Type> binding = parser.binding(d,baseType);
		int num = parser.sym.getId(binding.a);   
		Variable var = new Variable(num,binding.a,binding.b);
		parser.prefix.add(Tupel.create(var,o));
		RESULT=parser.generatePreFixes();
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_opt ::= ASSIGN expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_opt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_opt ::= 
            {
              Expression RESULT =null;
		  RESULT=null;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_opt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= typename 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
                      parser.sym.setLastParsedType(RESULT);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typename ::= VOID 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Void.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // typename ::= INT 
            {
              Type RESULT =null;
		 RESULT = Int.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // typename ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Char.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // typename ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Double.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // typename ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Float.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // typename ::= LONG 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Long.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // typename ::= SHORT 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Short.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // typename ::= TYPE_NAME 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<Type> t = (Terminal<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t.getTerminal(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typename ::= struct_spec 
            {
              Type RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$6 ::= 
            {
              Type RESULT =null;
 
	parser.sym.enterBlock();
    parser.blocknestingdepth++;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$7 ::= 
            {
              Type RESULT =(Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 
	Map<String,Type> m = new HashMap<>();
	for (Integer in: parser.sym.getLocals())
		m.put(parser.sym.getName(in),parser.sym.getType(in));
	RESULT =new Struct(m);
	parser.sym.leaveBlock();
    parser.blocknestingdepth--;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struct_spec ::= STRUCT NT$6 BEGIN struct_decl_list NT$7 END 
            {
              Type RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_spec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              Type RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
	RESULT =new Struct(i.getTerminal(),null); 
	parser.sym.registerNamedStruct(i.getTerminal(),(Struct)RESULT);
	parser.sym.enterBlock();
    parser.blocknestingdepth++;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$9 ::= 
            {
              Type RESULT =(Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

	Map<String,Type> m = new HashMap<>();
	for (Integer in: parser.sym.getLocals())
		m.put(parser.sym.getName(in),parser.sym.getType(in));
	((Struct)RESULT).bind(m);	
	System.out.println(((Struct)RESULT).toDetailedString());
	parser.sym.leaveBlock();
    parser.blocknestingdepth--;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_spec ::= STRUCT IDENT NT$8 BEGIN struct_decl_list NT$9 END 
            {
              Type RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_spec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_spec ::= STRUCT IDENT 
            {
              Type RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	RESULT = parser.sym.lookupNamedStruct(i.getTerminal());
	if (RESULT==null){
		parser.sym.registerNamedStruct(i.getTerminal(),new Struct(i.getTerminal(),null));
	}
	//System.out.println(" another use of "+((Struct)RESULT).toDetailedString());
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_spec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_decl_list ::= struct_decl_list struct_decl 
            {
              Map<String,Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_decl_list ::= 
            {
              Map<String,Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_decl ::= type initdeclList SEMI 
            {
              Map<String,Type> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramdecl ::= type 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramdecl ::= type abstract_declarator 
            {
              Type RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Tupel<String,Type> binding = parser.parambinding(d,typ);
 RESULT=binding.b;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramdecl ::= type declarator 
            {
              Type RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Tupel<String,Type> binding = parser.parambinding(d,typ);
 RESULT=binding.b;
 if (binding.a!=null){
 	try{
     	int id = parser.sym.newParameter(binding.a,binding.b);
 	}catch (Exception e) {
		e.printStackTrace();
     	parser.report_fatal_error("Parameter "+binding.a+" already declared", binding.a);
    }
  }
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramlist ::= paramlist COMMA paramdecl 
            {
              List<Type> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Type> l = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type d = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; RESULT.add(d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramlist ::= paramdecl 
            {
              List<Type> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type d = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Type>(); RESULT.add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramlist ::= 
            {
              List<Type> RESULT =null;
		 RESULT = new LinkedList<Type>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$10 ::= 
            {
              Procedure RESULT =null;
		Location bTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List bType = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    Type baseType=typeFrom(bType);
	if (isTypedef(bType)) parser.report_fatal_error("Typedef in Procedure definition is not legal!",bType);;
	Tupel<String,Type> binding = parser.binding(d,baseType);
    try {
		parser.sym.setLastParsedType(binding.b);
	    // TODO: Check type refinement for function prototypes!!!
		if (parser.sym.getType(binding.a)==null)
        	parser.sym.newLocal(binding.a);
		parser.sym.setLastParsedType(baseType);
	}catch (Exception ex){
		ex.printStackTrace();
		parser.report_fatal_error("Identifier "+binding.a+" already declared!",binding.a);
	}
	parser.sym.undoLeave();
    parser.blocknestingdepth++;
	parser.sym.setLastParsedType(binding.b);
	if (parser.sym.getType(binding.a)==null)
        	parser.sym.newGlobal(binding.a);
	parser.sym.setLastParsedType(baseType);
	parser.sym.enableTypenames();



              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procdecl ::= dspec declarator NT$10 BEGIN statementlist END 
            {
              Procedure RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Procedure) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location bTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		List bType = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	Type baseType=typeFrom(bType);
	Tupel<String,Type> binding = parser.binding(d,baseType);
    List<Integer> locals =  parser.sym.getLocals();
	//TODO: Parameters need to be extracted from declarator!!!!
    List<Integer> params = parser.sym.getParameters();
    List<Type> list = (List<Type>)(((Function)binding.b).parameter());
    for(Integer p : params) list.add(parser.sym.getType(p));
    State newret = parser.createState();
	parser.createNullEdge(l.b,newret);
	for (State r: parser.currentReturns()){
		parser.createNullEdge(r,newret);
	} 

    RESULT = new Procedure(binding.a,l.a,newret,locals, params); 


    parser.sym.leaveBlock();
    parser.blocknestingdepth--;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procdecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$11 ::= 
            {
              Tupel<State,State> RESULT =null;
 
	  parser.sym.enterBlock();
          parser.blocknestingdepth++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$12 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

          parser.sym.leaveBlock();
          parser.blocknestingdepth--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // body ::= NT$11 BEGIN statementlist NT$12 END 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // initdeclList ::= initdecl COMMA initdeclList 
            {
              AnnotatableList<Tupel<State,State>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tupel<State,State> i = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Tupel<State,State>> l = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 l.add2Begin(i);
 RESULT = l;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // initdeclList ::= initdecl 
            {
              AnnotatableList<Tupel<State,State>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> i = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    AnnotatableList<Tupel<State, State>> list = new AnnotatableList();
    list.add(i);
    RESULT = list;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exprlist ::= expr COMMA exprlist 
            {
              AnnotatableList<Expression> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Expression> l = (AnnotatableList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 l.add2Begin(e);
 RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exprlist ::= expr 
            {
              AnnotatableList<Expression> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    AnnotatableList<Expression> list = new AnnotatableList();
    list.add(e);
    RESULT = list;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statementlist ::= statement statementlist 
            {
              Tupel<State,State> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<State,State> t = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 parser.mergeStates(l.a, t.b);
 RESULT= new Tupel<State, State>(t.a, l.b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statementlist ::= 
            {
              Tupel<State,State> RESULT =null;
		
    State s = parser.createState();
    Tupel<State,State> t = new Tupel<State,State>(s,s);
    RESULT = t;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // elseprod ::= ELSE statement 
            {
              Tupel<State,State> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseprod",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // elseprod ::= 
            {
              Tupel<State,State> RESULT =null;
		 State s = parser.createState(); RESULT =new Tupel<State,State>(s,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseprod",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= HASH PRAGMA IDENT 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 State middle = parser.createState(); //als Referenzknoten zum Rücksprung in CFG-View
 middle.putAnnotation("__location", i.getAnnotation("__location_left"));
 middle.putAnnotation("__label", i.getTerminal());
 RESULT = new Tupel<State, State>(middle, middle);
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$13 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List type = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Tupel<State,State>> list = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

 Type typ = typeFrom(type);
 State begin = parser.createState();
 State b=list.get(0).a;   
 State end = parser.createState();
 Tupel<State, State> t;
 for(Tupel<State, State> init : list){
     parser.mergeStates(init.a, begin);
     begin = init.b;
     t = parser.generatePostFixes(true);
     parser.mergeStates(t.a, init.b);
     end = t.b;
 } 
 RESULT = new Tupel<State, State>(b, end);
 parser.sym.enableTypenames();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= dspec initdeclList NT$13 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List type = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AnnotatableList<Tupel<State,State>> list = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$14 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = parser.generatePrePostFixes();
 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$15 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePreFixes();
    //System.out.println("Prefix of boolex: "+t);
    parser.mergeStates(t.a, RESULT.b);
    State condBegin = t.a;
    condBegin.putAnnotation("__location", t.getAnnotation("__location_left"));
    
    Transition e = parser.createNullEdge(t.b,b.a);
    e.putAnnotation( "__location_left", b.a.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", t.getAnnotation("__location_right"));
    //parser.mergeStates(b.a, t.b);
    b.a = RESULT.a;
   
	condBegin.setLoopSeparator(true);
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    RESULT = new Tupel<State, State>(condBegin, b.c);
    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$16 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePrePostFixes();
    parser.mergeStates(RESULT.a,t.b);
    RESULT.a = t.a;

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= FOR LPAR expr NT$14 SEMI boolex NT$15 SEMI expr NT$16 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    // parser.blocknestingdepth--;
    parser.mergeStates(stmt.a, b.b);
    parser.mergeStates(RESULT.a, stmt.b);
    RESULT = new Tupel<State,State>(b.a, b.c);
    
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$17 ::= 
            {
              Tupel<State,State> RESULT =null;

    //perceive continue and break point for this loop on top of loopStack
    State endLoop = parser.createState();
    State continueLoop = parser.createState();
    parser.loopStack.push(new Tupel<State, State>(endLoop, continueLoop));
    RESULT = new Tupel<State, State>(endLoop, continueLoop);
//    parser.blocknestingdepth++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= NT$17 DO statement WHILE LPAR boolex RPAR SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    //  parser.blocknestingdepth--;
    Transition e = parser.createNullEdge(RESULT.b, stmt.a);
    e.putAnnotation( "__location_left", stmt.a.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", RESULT.b.getAnnotation("__location_right"));
    
    b.a.setLoopSeparator(true);
    parser.mergeStates(b.a, stmt.b);
    Tupel<State,State> t = parser.generatePreFixes();
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);

    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    
    Transition e2 = parser.createNullEdge(b.c,RESULT.a);
    e2.putAnnotation( "__location_left", b.c.getAnnotation("__location_left"));
    e2.putAnnotation( "__location_right", RESULT.a.getAnnotation("__location_right"));

    parser.mergeStates(stmt.a, b.b);
    //   RESULT = new Tupel<State,State>(stmt.a, b.c);
    RESULT = new Tupel<State,State>(RESULT.b, RESULT.a);

    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$18 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePreFixes();
    b.a.setLoopSeparator(true);
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= WHILE LPAR boolex NT$18 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.mergeStates(stmt.a, b.b);
    parser.mergeStates(b.a, stmt.b);
    RESULT = new Tupel<State,State>(b.a, b.c);
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$19 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    Tupel<State,State> t = parser.generatePreFixes();
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    RESULT=null;


        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= IF LPAR boolex NT$19 RPAR statement elseprod 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stmt1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmt1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<State,State> stmt1 = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> stmt2 = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State cond = parser.createState();
    parser.mergeStates(stmt1.a, b.b);
    parser.mergeStates(stmt2.a, b.c);
    parser.mergeStates(cond, stmt1.b);
    parser.mergeStates(cond, stmt2.b);
    RESULT = new Tupel<State,State>(b.a, cond);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$20 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT= parser.generatePrePostFixes();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= expr NT$20 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$21 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 

    Tupel<State,State> tu = parser.generatePrePostFixes();
    State end = parser.createState();
    end.putAnnotation("__location", tu.getAnnotation("__location_left")); //TODO: check if correct location
    Transition e = parser.createAssignmentEdge(tu.b, end, new Variable(parser.sym.getId("return"),"return",null), t);
    e.putAnnotation( "__location_left", t.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", t.getAnnotation("__location_right"));
	parser.addReturn(end);
    tu.b=parser.createState();
    RESULT=tu;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement ::= RETURN expr NT$21 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= body 
            {
              Tupel<State,State> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> b = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$22 ::= 
            {
              Tupel<State,State> RESULT =null;
  
    State start = parser.createState();
    State end = parser.createState();
    Tupel<State, State> stack = parser.loopStack.peek();
    Transition e = parser.createNullEdge(start, stack.a);
    e.putAnnotation( "__location_left", stack.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", start.getAnnotation("__location"));
    RESULT = new Tupel<State, State>(start, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement ::= BREAK NT$22 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$23 ::= 
            {
              Tupel<State,State> RESULT =null;

    State start = parser.createState();
    State end = parser.createState();
    Tupel<State, State> stack = parser.loopStack.peek();
    Transition e = parser.createNullEdge(start, stack.b);
    e.putAnnotation( "__location_left", stack.getAnnotation("__location_right"));
    e.putAnnotation( "__location_right", start.getAnnotation("__location"));
    RESULT = new Tupel<State, State>(start, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement ::= CONTINUE NT$23 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement ::= CASE INTCONST COLON statement 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<Integer> i = (Terminal<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expression guard = new BinaryExpression( new IntegerConstant(i.getTerminal()), new Operator(Operator.MINUS), parser.switchStack.peek().a);
    parser.createAssertionEdge(parser.switchStack.peek().b, s.a, guard, new Operator(Operator.EQ));
    State newcont = parser.createState();
    parser.createAssertionEdge(parser.switchStack.peek().b, newcont, guard, new Operator(Operator.NEQ));
    parser.switchStack.peek().b=newcont;
    RESULT=s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statement ::= DEFAULT COLON statement 
            {
              Tupel<State,State> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.createNullEdge(parser.switchStack.peek().c,s.a);
    RESULT=s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$24 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    State start = parser.createState();
    State end = parser.createState();
    State defaul = parser.createState();
    parser.switchStack.push(Tripel.create(e,start,defaul)); 
    State cont=null;
    if (!parser.loopStack.isEmpty()) cont = parser.loopStack.peek().b;
    parser.loopStack.push(Tupel.create(end,cont));
    RESULT = Tupel.create(start,end);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // statement ::= SWITCH LPAR expr NT$24 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	State st = parser.switchStack.peek().c;
    parser.createNullEdge(parser.switchStack.peek().b,parser.switchStack.peek().c);
	if (st.getOutDegree()==0) parser.createNullEdge(st,s.b);
    State start = parser.switchStack.pop().b;
    State breaks = parser.loopStack.pop().a;
    parser.createNullEdge(breaks, s.b);
    RESULT=Tupel.create(RESULT.a,s.b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // statement ::= GOTO IDENT SEMI 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
   State source = parser.createState();
    //TODO: actual goto implementation
   State dest = parser.sym.getStateForLabel(i.getTerminal());
   if (dest!=null) {
        parser.createNullEdge(source,dest);
   }
   else parser.sym.registerGoto(i.getTerminal(),source);
   RESULT=Tupel.create(source,parser.createState());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement ::= IDENT COLON statement 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    try{
    parser.sym.enterLabel(i.getTerminal(),s.a);
    } catch (Exception e){
        parser.report_error("Label "+i.getTerminal()+" already declarated",i);
    }
    RESULT=s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lhsexpression ::= IDENT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    RESULT = parser.obtainExpr(i.getTerminal());  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lhsexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lhsexpression ::= MULOP expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new UnaryExpression(e,new Operator(Operator.DEREF));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lhsexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lhsexpression ::= expr LSQ expr RSQ 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new BinaryExpression(lhs,new Operator(Operator.ARRAY),rhs);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lhsexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= lhsexpression 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= INTCONST 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<Integer> i = (Terminal<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new IntegerConstant(i.getTerminal()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> l = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(l.getTerminal()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= expr ASSIGN QUESTIONMARK 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    UnknownExpression unknown =  new UnknownExpression(l.getType());
    parser.prefix.add(Tupel.create(l, unknown));
    RESULT = unknown;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= expr ASSIGN expr 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Type typ = l.getType();
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(l,ex));
    parser.prefix.add(Tupel.create(tmp,l));
    RESULT = tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= ADDOFOP expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new UnaryExpression(e,new Operator(Operator.ADDRESSOF));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= SUBOP expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(e, new Operator(Operator.MUL), new IntegerConstant(-1));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= expr SELECTOR 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> s = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	parser.sym.enableTypenames(); 
	RESULT = new BinaryExpression(lhs, new Operator(Operator.SELECT), new Variable(0,s.getTerminal(),Int.create()));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= expr MULOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.MUL), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= expr ADDOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.PLUS), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= expr DIVOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.DIV), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= expr SUBOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.MINUS), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= IDENT DECOP 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression ex = new BinaryExpression(v, new Operator(Operator.MINUS), new IntegerConstant(1));
    ex.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    ex.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(tmp,v));
    parser.prefix.add(Tupel.create(v,ex));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= IDENT INCOP 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression ex = new BinaryExpression(v, new Operator(Operator.PLUS), new IntegerConstant(1));
    ex.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    ex.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(tmp,v));
    parser.prefix.add(Tupel.create(v,ex));
    RESULT = tmp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr ::= INCOP IDENT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.PLUS), new IntegerConstant(1));
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= DECOP IDENT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.MINUS), new IntegerConstant(1));
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT=tmp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= IDENT PLUSEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.PLUS), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= IDENT MINUSEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.MINUS), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr ::= IDENT DIVEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.DIV), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr ::= IDENT MULEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.MUL), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= IDENT LPAR RPAR 
            {
              Expression RESULT =null;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> rhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
    Type typ = parser.sym.getType(rhs.getTerminal());
	if (typ==null) parser.report_fatal_error("variable "+rhs+" not declared",rhs);
    if (typ instanceof PointerTo) typ=((PointerTo)typ).getInner();
    if (!(typ instanceof Function)) parser.report_fatal_error("function call on non function type: "+typ,rhs);
    Type rettyp = ((Function)typ).getReturnType();
    Expression e = new FunctionCall(rhs.getTerminal(), typ, new ArrayList<Expression>());    
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),rettyp);
    parser.prefix.add(Tupel.create(tmp,e));
    RESULT = tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= IDENT LPAR exprlist RPAR 
            {
              Expression RESULT =null;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Terminal<String> rhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AnnotatableList<Expression> l = (AnnotatableList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    Type typ = parser.sym.getType(rhs.getTerminal());
	if (typ==null) parser.report_fatal_error("variable "+rhs+" not declared",rhs);
    if (typ instanceof PointerTo) typ=((PointerTo)typ).getInner();
    if (!(typ instanceof Function)) parser.report_fatal_error("function call on non function type: "+typ,rhs);
    Type rettyp = ((Function)typ).getReturnType();
    Expression e = new FunctionCall(rhs.getTerminal(), typ, l.getList());    
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),rettyp);
    parser.prefix.add(Tupel.create(tmp,e));
    RESULT = tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // boolex ::= expr NEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.NEQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.EQ));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // boolex ::= NOT boolex 
            {
              Tripel<State,State,State> RESULT =null;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

    State swap = rhs.c;
    rhs.c=rhs.b;
    rhs.b=swap;
    RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // boolex ::= LPAR boolex RPAR 
            {
              Tripel<State,State,State> RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tripel<State,State,State> ex = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // boolex ::= expr EQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.EQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.NEQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // boolex ::= boolex OR boolex 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tripel<State,State,State> lhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = lhs.a;
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    parser.mergeStates(succeded, lhs.b);
    parser.mergeStates(succeded, rhs.b);

    parser.mergeStates(rhs.a, lhs.c);
    parser.mergeStates(failed, rhs.c);
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // boolex ::= boolex AND boolex 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tripel<State,State,State> lhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = lhs.a;
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    parser.mergeStates(rhs.a, lhs.b);
    parser.mergeStates(succeded, rhs.b);

    parser.mergeStates(failed, lhs.c);
    parser.mergeStates(failed, rhs.c);
    RESULT = new Tripel<State, State, State>(s, succeded, failed);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // boolex ::= expr GEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GTQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LE));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // boolex ::= expr LEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LEQ));
   a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GT));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // boolex ::= expr LT expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LE));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GTQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // boolex ::= expr GT expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GT));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LEQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));    
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
